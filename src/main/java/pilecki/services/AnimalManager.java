package pilecki.services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import javax.enterprise.context.ApplicationScoped;

import pilecki.project.*;




@ApplicationScoped
public class AnimalManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addAnimalStmt;
	private PreparedStatement getAnimalStmt;
	private PreparedStatement deleteAllAnimalStmt;
	private PreparedStatement searchAnimalByNameStmt;
	private PreparedStatement searchAnimalByKindStmt;
	private PreparedStatement deleteAnimalStmt;


	public AnimalManager() {

		try {

			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			stmt = conn.createStatement();
			boolean gameTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while(rs.next()) {
				if("Animals".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					gameTableExists = true;
					break;
				}
			}


			if(!gameTableExists) {
				stmt.executeUpdate("" +
						"CREATE TABLE Animals(" +
						"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
						"name varchar(36)," +
						"kind varchar(36)" +						
						"releaseYear int," +
						"age int" +
						")");
			}

			addAnimalStmt = conn.prepareStatement("" +
					"INSERT INTO Animals (name, kind, releaseYear, age) VALUES (?, ?, ?, ?)" +
					"");

			getAnimalStmt = conn.prepareStatement("" +
					"SELECT * FROM Animals" +
					"");

			deleteAllAnimalStmt = conn.prepareStatement("" +
					"DELETE FROM Animals" +
					"");

			searchAnimalByNameStmt = conn.prepareStatement("" +
					"SELECT id FROM Animals WHERE name = ?" +
					"");

			searchAnimalByKindStmt = conn.prepareStatement("" +
					"SELECT id FROM Animals WHERE kind = ?" +
					"");

			deleteAnimalStmt = conn.prepareStatement("" +
					"DELETE FROM Animals WHERE id = ?" +
					"");



		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return conn;
	}		

	public void addAnimal(Animals Animal) {
		try {
			addAnimalStmt.setString(1, Animal.getName());
			addAnimalStmt.setString(2, Animal.getKiOfAnim().toString());			
			addAnimalStmt.setInt(3, Animal.getReleaseYear());
			addAnimalStmt.setInt(4, Animal.getAge());

			addAnimalStmt.executeUpdate();

		} catch (SQLException e) {

			e.printStackTrace();
		}

	}

	public List<Animals> getAllAnimal() {
		List<Animals> animals = new ArrayList<Animals>();

		try {
			ResultSet rs = getAnimalStmt.executeQuery();

			while(rs.next()) {

				if(rs.getString("kind").equalsIgnoreCase("Mammals"))
					animals.add(new Animals(rs.getString("name"),KiOfAnim.Mammals,rs.getInt("releaseYear"),rs.getInt("age")));
				else if(rs.getString("kind").equalsIgnoreCase("Reptile"))
					animals.add(new Animals(rs.getString("name"),KiOfAnim.Reptile,rs.getInt("releaseYear"),rs.getInt("age")));
				else if(rs.getString("kind").equalsIgnoreCase("Bird"))
					animals.add(new Animals(rs.getString("name"),KiOfAnim.Bird,rs.getInt("releaseYear"),rs.getInt("age")));

			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return animals;
	}

	public void deleteAllAnimals() {
		try {
			deleteAllAnimalStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> searchAnimalByName (String name)
	{
		try {
			List<Integer> result = new ArrayList<Integer>();
			searchAnimalByNameStmt.setString(1, name);

			ResultSet rs = searchAnimalByNameStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}

	public List<Integer> searchAnimalByKind (KiOfAnim kind)
	{
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			searchAnimalByKindStmt.setString(1, kind.toString());

			ResultSet rs = searchAnimalByKindStmt.executeQuery();
			while (rs.next())
				result.add(rs.getInt("ID"));
			return result;
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}	

	public void deleteAnimal(List<Integer> list)
	{
		try {
			for (Integer id : list) {
				deleteAnimalStmt.setInt(1, id);
				deleteAnimalStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}


	public void printAnimalWithCondition(List<Animals> listAnimal, Condition condition) {
		for (Animals animal : listAnimal) {
			if (condition.getCondition(animal)) {
				System.out.println("Name: " + animal.getName() + "\tKind: "
								+ animal.getKiOfAnim() + "\tAge: "
								+ animal.getAge());
			}
		}
	}

}
