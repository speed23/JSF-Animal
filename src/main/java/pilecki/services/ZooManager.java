package pilecki.services;

import java.io.IOException;
import java.sql.*;
import java.util.*;

import javax.enterprise.context.ApplicationScoped;

import pilecki.project.*;



@ApplicationScoped
public class ZooManager {

	private Connection conn;
	private Statement stmt;
	private PreparedStatement addZooStmt;
	private PreparedStatement getZooStmt;
	private PreparedStatement deleteAllZooStmt;
	private PreparedStatement deleteZooStmt;
	private PreparedStatement findZooStmt;



	public ZooManager() {


		try{
			conn = DriverManager.getConnection("jdbc:hsqldb:hsql://localhost/workdb");
			stmt = conn.createStatement();
			boolean customerTableExists = false;

			ResultSet rs = conn.getMetaData().getTables(null, null, null, null);

			while(rs.next()) {
				if("Zoo".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					customerTableExists = true;
					break;
				}
			}


			if(!customerTableExists) {
				stmt.executeUpdate("" +
						"CREATE TABLE Zoo(" +
						"id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
						"name varchar(20)," +
						"adress varchar(20)," +
						"dateOfBuild date," +
						")");
			}

			addZooStmt = conn.prepareStatement("" +
					"INSERT INTO Zoo (name, adress, dateOfBuild) VALUES (?, ?, ?)" +
					"");

			getZooStmt = conn.prepareStatement("" +
					"SELECT * FROM Zoo" +
					"");

			deleteAllZooStmt = conn.prepareStatement("" +
					"DELETE FROM Zoo" +
					"");

			findZooStmt = conn.prepareStatement("" +
					"SELECT id FROM Zoo WHERE adress = ?" +
					"");

			deleteZooStmt = conn.prepareStatement("" +
					"DELETE FROM Zoo WHERE id = ?" +
					"");



		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Connection getConnection() {
		return conn;
		}

	public void addZoo(Zoo zoo) {
		try {
			java.sql.Date date = new java.sql.Date(zoo.getDateOfBuild().getTime());
			addZooStmt.setString(1, zoo.getName());
			addZooStmt.setString(2, zoo.getAdress());
			addZooStmt.setDate(3, date);
			addZooStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}

	}

	public List<Zoo> getAllZoo() {

		List<Zoo> zoo = new ArrayList<Zoo>();

		try {
			ResultSet rs = getZooStmt.executeQuery();

			while(rs.next()) {
				zoo.add(new Zoo(rs.getString("name"), rs.getString("adress"), rs.getDate("dateOfBuild")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		return zoo;
	}

	public void deleteAllZoo() {
		try {
			deleteAllZooStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public List<Integer> searchZoobyAdress(String adress) {
		try 
		{
			List<Integer> result = new ArrayList<Integer>();
			findZooStmt.setString(1, adress);
			ResultSet rs = findZooStmt.executeQuery();

			while (rs.next())
				result.add(rs.getInt("ID"));

			return result;

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;			
	}

	public void deleteZoo(List<Integer> list) {
		try {
			for (Integer id : list) {
				deleteZooStmt.setInt(1, id);
				deleteZooStmt.executeUpdate();
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}	



}